import java.util.concurrent.CyclicBarrier;

/*************************************************************
  ------------- Parallel matrix multiplication --------------
 *************************************************************/

class ParaMatrixMulti {

    int cores = Runtime.getRuntime().availableProcessors();
    CyclicBarrier cb = new CyclicBarrier(cores + 1);
    Oblig2Precode.Mode operation;
    double[][] a, b, c;

    /**
     * Constructor in ParaMatrixMulti class
     * @param a - Matrix a used for multiplication. Generated by Oblig2Precode
     * @param b - Matrix b used for multiplication. Generated by Oblig2Precode
     * @param c - Matrix used to return product of the multiplication of a x b
     * @param operation - the variant of Matrix Multiplication to use
     */
    ParaMatrixMulti(double[][] a, double[][] b, double[][] c, Oblig2Precode.Mode operation) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.operation = operation;
    }


    /**
     * Parallel multiplication of matrix
     * Give each thread a segment of the matrix and then uses the inner Worker
     * class which calls the chosen sequentual version for multiplication
     */
    public void multiplyMatrix() {

        int sizeOfSegment = a.length / cores;
        int remainder = a.length % cores;
        int start = 0;

        for (int i = 0; i < remainder; i++) {
            int end = start + sizeOfSegment + 1;
            new Thread(new Worker(i, start, end)).start();
            start += sizeOfSegment + 1;
        }

        for (int j = remainder; j < cores; j++) {
            int end = start + sizeOfSegment;
            new Thread(new Worker(j, start, end)).start();
            start += sizeOfSegment;
        }

        try {
            cb.await();
        } catch(Exception e) {
            e.printStackTrace();
        }
    }


    /**
     * Inner worker class which implements the Runnable interface
     * Uses the start and end index for sequentially multiplying the given segments
     * by calling the chosen sequentual operation for multiplication
     */
    class Worker implements Runnable {
          int id, start, end;

          /**
           * @param id - identification number to uniquely identify each thread
           * @param start - start-index for segment to multiply
           * @param end - end-index for segment to multiply
           */
          Worker(int id, int start, int end) {
              this.id = id;
              this.start = start;
              this.end = end;
          }


          /**
           * Call chosen sequentual method for multiplication
           * Usine the start and end index for sequentially executing a
           * given segment of the Matrix Multiplication
           */
          public void run() {
              if(operation == operation.PARA_NOT_TRANSPOSED) {
                  SeqMatrixMulti.no_transpose(a, b, c, start, end);
              }
              else if(operation == operation.PARA_A_TRANSPOSED) {
                  SeqMatrixMulti.a_transpose(a, b, c, start, end);
              }
              else if(operation == operation.PARA_B_TRANSPOSED) {
                  SeqMatrixMulti.b_transpose(a, b, c, start, end);
              }
              try {
                  cb.await();
              } catch (Exception e) {
                  e.printStackTrace();
              }
          }
      }
}
